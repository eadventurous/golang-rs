<Root> ::= <SourceFile> ;

/************************************************
**                  Types                      **
************************************************/

<Type>
    ::= <TypeName>
    |   <TypeLit>
    |   "(" <Type> ")"
    ;
/*
// Modified from go specs to avoid FIRST/FIRST conflict
<TypeName>
    ::= "identifier"
    |   <QualifiedIdent>
    ;
*/
<TypeName>
    ::= "identifier" <QualifiedIdent>
    ;
<TypeLit>
    ::= "[" <TypeLit'>
    |   <StructType>
    |   <PointerType>
    |   <FunctionType>
    |   <InterfaceType>
    |   <MapType>
    |   <ChannelType>
    ;
<TypeLit'>
    ::= <ArrayType'>
    |   <SliceType'>
    ;

//////            Array types              //////

<ArrayType>
    ::= "[" <ArrayType'>
    ;
<ArrayType'>
    ::= <ArrayLength> "]" <ElementType>
    ;
<ArrayLength> ::= <Expression> ;
<ElementType> ::= <Type> ;


//////            Slice types              //////

<SliceType>
    ::= "[" <SliceType'>
    ;
<SliceType'>
    ::= "]" <ElementType>
    ;


//////            Struct types             //////

<StructType>
    ::= "struct" "{" { <FieldDecl> ";" } "}"
    ;
<FieldDecl>
    ::= (   <IdentifierList> <Type>
        |   <EmbeddedField>
        )
        [ <Tag> ]
    ;
<EmbeddedField>
    ::= [ "*" ] <TypeName>
    ;
<Tag> ::= "string_lit" ;


/************************************************
**              Pointer types                  **
************************************************/

<PointerType>
    ::= "*" <BaseType>
    ;
<BaseType> ::= <Type> ;


/************************************************
**              Function types                 **
************************************************/

<FunctionType>
    ::= "func" <Signature>
    ;
<Signature>
    ::= <Parameters> [ <Result> ]
    ;
<Result>
    ::= <Parameters>
    |   <Type>
    ;
<Parameters>
    ::= "(" [ <ParameterList> [ "," ] ] ")"
    ;
<ParameterList>
    ::= <ParameterDecl> { "," <ParameterDecl> }
    ;
<ParameterDecl>
    ::= [ <IdentifierList> ] [ "..." ] <Type>
    ;


/************************************************
**             Interface types                 **
************************************************/

<InterfaceType>
    ::= "interface" "{" { <MethodSpec> ";" } "}"
    ;
<MethodSpec>
    ::= <MethodName> <Signature> | <InterfaceTypeName>
    ;
<MethodName> ::= "identifier" ;
<InterfaceTypeName> ::= <TypeName> ;


/************************************************
**                 Map types                   **
************************************************/

<MapType>
    ::= "map" "[" <KeyType> "]" <ElementType>
    ;
<KeyType> ::= <Type> ;


/************************************************
**              Channel types                  **
************************************************/

<ChannelType>
    ::= ( "chan"
        | "chan" "<-"
        | "<-" "chan"
        )
        <ElementType>
    ;


/************************************************
**                  Blocks                     **
************************************************/

<Block>
    ::= "{" <StatementList> "}"
    ;
<StatementList>
    ::= { <Statement> ";" }
    ;

/************************************************
**           Declarations and scope            **
************************************************/

<Declaration>
    ::= <ConstDecl>
    |   <TypeDecl>
    |   <VarDecl>
    ;
<TopLevelDecl>
    ::= <Declaration>
    |   <FunctionDecl>
    |   <MethodDecl>
    ;


/************************************************
**           Constant declarations             **
************************************************/

<ConstDecl>
    ::= "const" (       <ConstSpec>
                | "(" { <ConstSpec> ";" } ")"
                )
    ;
<ConstSpec>
    ::= <IdentifierList> <ConstSpec'>
    ;
<ConstSpec'>
    ::=        "=" <ExpressionList>
    |   <Type> "=" <ExpressionList>
    |   /* epsilon */
    ;

<IdentifierList>
    ::= "identifier" { "," "identifier" }
    ;
<ExpressionList>
    ::= <Expression> { "," <Expression> }
    ;


/************************************************
**             Type declarations               **
************************************************/

<TypeDecl>
    ::= "type" ( <TypeSpec>
               | "(" { <TypeSpec> ";" } ")" )
    ;
<TypeSpec>
    ::= <AliasDecl>
    |   <TypeDef>
    ;


//////        Alias declarations           //////

<AliasDecl>
    ::= "identifier" "=" <Type>
    ;


//////         Type definitions            //////

<TypeDef>
    ::= "identifier" <Type>
    ;


/************************************************
**           Variable declarations             **
************************************************/

<VarDecl>
    ::= "var" ( <VarSpec>
              | "(" { <VarSpec> ";" } ")" )
    ;
<VarSpec>
    ::= <IdentifierList> (  <Type> "=" <ExpressionList>
                         |  <Type>
                         | "=" <ExpressionList>
                         )
    ;


/************************************************
**        Short variable declarations          **
************************************************/

<ShortVarDecl>
    ::= <IdentifierList> ":=" <ExpressionList>
    ;


/************************************************
**           Function declarations             **
************************************************/

<FunctionDecl>
    ::= "func" <FunctionName> <Signature> [ <FunctionBody> ]
    ;
<FunctionName>
    ::= "identifier"
    ;
<FunctionBody>
    ::= <Block>
    ;


/************************************************
**           Method declarations               **
************************************************/

<MethodDecl>
    ::= "func" <Receiver> <MethodName> <Signature> [ <FunctionBody> ]
    ;
<Receiver>
    ::= <Parameters>
    ;


/************************************************
**               Expressions                   **
************************************************/

//////            Operands                 //////

<Operand>
    ::= <Literal>
    |   <OperandName>
    | "(" <Expression> ")"
    ;
<Literal>
    ::= <BasicLit>
    |   <CompositeLit>
    |   <FunctionLit>
    ;
<BasicLit>
    ::= "int_lit"
    |   "float_lit"
    |   "imaginary_lit"
    |   "rune_lit"
    |   "string_lit"
    ;
<OperandName>
    ::= "identifier"
    |   <QualifiedIdent>
    ;

//////       Qualified identifiers         //////


<QualifiedIdent>
    ::= <PackageName> "." "identifier"
    ;

//////       Composite literals           //////

<CompositeLit>
    ::= <LiteralType> <LiteralValue>
    ;
<LiteralType>
    ::= <StructType>
    |   <ArrayType>
    |   "[" "..." "]" <ElementType>
    |   <SliceType>
    |   <MapType>
    |   <TypeName>
    ;
<LiteralValue>
    ::= "{" [ <ElementList> [ "," ] ] "}"
    ;
<ElementList>
    ::=       <KeyedElement>
        { "," <KeyedElement> }
    ;
<KeyedElement>
    ::= [ <Key> ":" ] <Element>
    ;
<Key>
    ::= <FieldName>
    |   <Expression>
    |   <LiteralValue>
    ;
<FieldName>
    ::= "identifier"
    ;
<Element>
    ::= <Expression>
    |   <LiteralValue>
    ;

//////         Function literals          //////

<FunctionLit>
    ::= "func" <Signature> <FunctionBody>
    ;


//////       Primary expressions          //////

<PrimaryExpr>
    ::= <Operand>
    |   <Conversion>
    |   <MethodExpr>
    |   <PrimaryExpr> <Selector>
    |   <PrimaryExpr> <Index>
    |   <PrimaryExpr> <Slice>
    |   <PrimaryExpr> <TypeAssertion>
    |   <PrimaryExpr> <Arguments>
    ;

<Selector>
    ::= "." "identifier"
    ;
<Index>
    ::= "[" <Expression> "]"
    ;
<Slice>
    ::= "[" [ <Expression> ] ":" [ <Expression> ] "]"
    |   "[" [ <Expression> ] ":" <Expression> ":" <Expression> "]"
    ;
<TypeAssertion>
    ::= "." "(" <Type> ")"
    ;
<Arguments>
    ::= "(" [ ( <ExpressionList> | <Type> [ "," <ExpressionList> ] ) [ "..." ] [ "," ] ] ")"
    ;

//////        Method expressions          //////

<MethodExpr>
    ::= <ReceiverType> "." <MethodName>
    ;
<ReceiverType> ::= <Type> ;


/************************************************
**                 Operators                   **
************************************************/

<Expression>
    ::= <UnaryExpr>
    |   <Expression> <binary_op> <Expression>
    ;
<UnaryExpr>
    ::= <PrimaryExpr>
    |   <unary_op> <UnaryExpr>
    ;

<binary_op>
    ::= "||" | "&&" | <rel_op> | <add_op> | <mul_op>
    ;
<rel_op>
    ::= "==" | "!=" | "<" | "<=" | ">" | ">="
    ;
<add_op>
    ::= "+" | "-" | "|" | "^"
    ;
<mul_op>
    ::= "*" | "/" | "%" | "<<" | ">>" | "&" | "&^"
    ;
<unary_op>
    ::= "+" | "-" | "!" | "^" | "*" | "&" | "<-"
    ;

//////            Conversions             //////
<Conversion>
    ::= <Type> "(" <Expression> [ "," ] ")"
    ;


/************************************************
**                Statements                   **
************************************************/

<Statement>
    ::= <Declaration>
	|   <LabeledStmt>
	|   <SimpleStmt>
	|   <GoStmt>
	|   <ReturnStmt>
	|   <BreakStmt>
	|   <ContinueStmt>
	|   <GotoStmt>
	|   <FallthroughStmt>
	|   <Block>
	|   <IfStmt>
	|   <SwitchStmt>
	|   <SelectStmt>
	|   <ForStmt>
	|   <DeferStmt>
	;

<SimpleStmt>
    ::= <EmptyStmt>
    |   <ExpressionStmt>
    |   <SendStmt>
    |   <IncDecStmt>
    |   <Assignment>
    |   <ShortVarDecl>
    ;


//////        Empty statements            //////

<EmptyStmt> ::= ;


/////        Labeled statements           //////

<LabeledStmt>
    ::= <Label> ":" <Statement>
    ;
<Label>
    ::= "identifier"
    ;

//////       Expression statements        //////

<ExpressionStmt> ::= <Expression> ;


//////         Send statements            //////

<SendStmt>
    ::= <Channel> "<-" <Expression>
    ;
<Channel>
    ::= <Expression>
    ;


//////         IncDec statements          //////

<IncDecStmt> ::= <Expression> ( "++" | "--" ) ;


//////            Assignments             //////

<Assignment>
    ::= <ExpressionList> <assign_op> <ExpressionList>
    ;

<assign_op>
    // add_op
    ::= "+=" | "-=" | "|=" | "^="
    // mul_op
    |   "*=" | "/=" | "%=" | "<<=" | ">>=" | "&=" | "&^="
    ;


//////          If statements             //////

<IfStmt>
    ::= "if" [ <SimpleStmt> ";" ] <Expression> <Block> [ "else" ( <IfStmt> | <Block> ) ]
    ;


//////         Switch statements          //////

<SwitchStmt>
    ::= <ExprSwitchStmt>
    |   <TypeSwitchStmt>
    ;

// Expression switches

<ExprSwitchStmt>
    ::= "switch" [ <SimpleStmt> ";" ] [ <Expression> ] "{" { <ExprCaseClause> } "}"
    ;
<ExprCaseClause>
    ::= <ExprSwitchCase> ":" <StatementList>
    ;
<ExprSwitchCase>
    ::= "case" <ExpressionList>
    |   "default"
    ;

//////           For statements           //////

<ForStmt>
    ::= "for" [ <Condition> | <ForClause> | <RangeClause> ] <Block>
    ;
<Condition> ::= <Expression> ;


//////   For statements with for clause   //////

<ForClause>
    ::= [ <InitStmt> ] ";" [ <Condition> ] ";" [ <PostStmt> ]
    ;
<InitStmt>
    ::= <SimpleStmt>
    ;
<PostStmt>
    ::= <SimpleStmt>
    ;

//////  For statements with range clause  //////

<RangeClause>
    ::= [ <ExpressionList> "="
        | <IdentifierList> ":="
        ]
        "range" <Expression>
    ;


//////            Go statements           //////

<GoStmt> ::= "go" <Expression> ;


//////         Select statements          //////

<SelectStmt>
    ::= "select" "{" { <CommClause> } "}"
    ;
<CommClause>
    ::= <CommCase> ":" <StatementList>
    ;
<CommCase>
    ::= "case" ( <SendStmt> | <RecvStmt> )
    |   "default"
    ;
<RecvStmt>
    ::= [ <ExpressionList> "="
        | <IdentifierList> ":="
        ]
        <RecvExpr>
    ;
<RecvExpr> ::= <Expression> ;


//////        Return statements           //////

<ReturnStmt>
    ::= "return" [ <ExpressionList> ]
    ;


//////         Break statements           //////

<BreakStmt>
    ::= "break" [ <Label> ]
    ;


//////        Continue statements         //////


<ContinueStmt>
    ::= "continue" [ <Label> ]
    ;


//////          Goto statements           //////

<GotoStmt>
    ::= "goto" <Label>
    ;


//////       Fallthrough statements       //////

<FallthroughStmt>
    ::= "fallthrough"
    ;
<DeferStmt>
    ::= "defer" <Expression>
    ;


/************************************************
**          Source file organization           **
************************************************/

<SourceFile>
    ::= <PackageClause> ";"
      { <ImportDecl>    ";" }
      { <TopLevelDecl>  ";" }
    ;


/************************************************
**              Package clause                 **
************************************************/

<PackageClause>
    ::= "package" <PackageName>
    ;
<PackageName> ::= "identifier" ;


/************************************************
**           Import declarations               **
************************************************/

<ImportDecl>
    ::= "import" ( <ImportSpec>
                 | "(" { <ImportSpec> ";" } ")"
                 )
    ;
<ImportSpec>
    ::= [ "." | <PackageName> ] <ImportPath>
    ;
<ImportPath> ::= "string_lit" ;
